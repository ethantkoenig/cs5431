if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(JavaCompile) {
            options.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
}

apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.56'
    compile "com.sparkjava:spark-core:2.5.5"
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.2' //required for spark
    compile group: 'com.sparkjava', name: 'spark-template-freemarker', version: '2.0.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.13' //db requirement
    // quickcheck
    testCompile 'com.pholser:junit-quickcheck-core:0.7'
    testCompile 'com.pholser:junit-quickcheck-generators:0.7'
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
}

findbugs {
    effort = "max"
    reportLevel = "low"
}

mainClassName = "Main"

jar {
    manifest {
        attributes(
                'Main-Class': 'Main'
        )
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

run {
   standardInput = System.in
}

if (project.hasProperty("verbose")) {
    def startTimestamp = 0
    test {
        beforeTest { desc ->
            startTimestamp = new Date().getTime()
            println "${desc.name} [${desc.className}]"
        }
        afterTest { desc, result ->
            def diff = new Date().getTime() - startTimestamp
            println "  ${result.resultType} (time = ${diff} ms)"
        }
    }
}
