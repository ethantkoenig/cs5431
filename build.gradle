apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.5.5'
    compile group: 'com.sparkjava', name: 'spark-template-freemarker', version: '2.5.5'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'
    compile group: 'javax.mail', name: 'mail', version: '1.4.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.13'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.56'
    compile group: 'org.dbunit', name: 'dbunit', version: '2.5.3'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.2'

    testCompile group: 'com.pholser', name: 'junit-quickcheck-core', version: '0.7'
    testCompile group: 'com.pholser', name: 'junit-quickcheck-generators', version: '0.7'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
}

findbugs {
    effort = "max"
    reportLevel = "low"
}

applicationDefaultJvmArgs = ["-Djava.security.properties=java.security"]
mainClassName = "Main"

jar {
    manifest {
        attributes(
                'Main-Class': 'Main'
        )
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

run {
    standardInput = System.in
}

test {
    if (project.hasProperty("verbose")) {
        def startTimestamp = 0
        beforeTest { desc ->
            startTimestamp = new Date().getTime()
            println "${desc.name} [${desc.className}]"
        }
        afterTest { desc, result ->
            def diff = new Date().getTime() - startTimestamp
            println "  ${result.resultType} (time = ${diff} ms)"
        }
    }
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
    }
}
