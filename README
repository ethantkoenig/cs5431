# CS 5431 - Milestone 3 README

James Cassell (jcc384)
Evan King (esk79)
Ethan Koenig (etk39)
Eric Perdew (ecp84)
Will Ronchetti (wrr33)

## Overview

Our project uses Java 8. We have most extensively tested on 1.8.0_121 and
1.8.0_31, but any version 1.8.0_xyz *should* be sufficient.

Our projects uses the Gradle build tool. We have included the Gradle wrapper, so
that you do not need to install Gradle manually. Note that the first command you
run using the Gradle the wrapper may take a few minutes.

## Compiling and Running

### Compiling and setup

To compile our source code, run

$ ./gradlew assemble

This command will create a compressed archive at build/distributions/cs5431.tar.
Copy this tar to a directory of your choosing, and extract it.

Inside the decompressed directory, there will be an executable at bin/cs5431.
This executable will run our project.

### Running a Node

To launch a node (i.e. a ledger-keeping, block-mining component of the
cryptocurrency network), run

$ bin/cs5431 miner <port no> <public> <private> <privileged> <address list>

Arguments:
* port_no : port number to bind to
* public  : filepath to this node's public key (generated via a client, see below)
* private  : filepath to this node's private key (generated via a client, see below)
* privileged  : filepath to the "privileged" public key (generated via client)
                the "privileged" public key is a public key belonging to a
                particular node, which allows that node to mine the genesis block.
* address : filepath to list of addresses of other nodes to connect to; these are 
            nodes that have already been started. This means that the first node to
            start up should not have any address arguments in the file, the second 
            node should should the first node's address, etc. Each address should be
            on a separate line of the form "(ip address):(port no)"

For example, to launch three nodes locally, run

$ bin/cs5431 node 8000 public1 private1 public3

(then, in another terminal)
$ echo "localhost:8000" > nodes1.txt
$ bin/cs5431 node 8001 public2 private2 public3 nodes1.txt

(finally, in yet another terminal)
$ echo -e "localhost:8000\nlocalhost:8001" > nodes2.txt
$ bin/cs5431 node 8002 public3 private3 public3 node2.txt

where publicX/privateX are filepaths to public/private keys.

### Running a Client

A client allows you to generate keys and perform transactions. To launch a
client, run

$ bin/cs5431 client

This will open an interactive shell, which supports the following commands:

* help - list all commands
* quit - quit the shell
* setNodeList <filepath> -
    Given a file with lines of the form "(ip address):(port number)", register
    the list of running nodes to connect to for transactions.
* generate <public filepath> <private filepath> -
    Generate a public/private key pair to the specified filepaths
* transact
    Perform a transaction. You will be prompted to enter the details of your
    transaction:
    - For each input, the transaction SHA-256 hash, index, and private key to sign with
    - For each output, the amount and recipient public key
    The keys should be given as filepaths to files generated by the "generate"
    command. Transaction hashes should be given as hex strings, which can be
    gleaned from the nodes' output.

### Running the Webserver

To run the webserver,

1. Store the MySql password ("pbM,L3j]") in $MYSQL_PASS
2. Store our email password ("HAfCt/9^") in $EMAIL_PASS
3. Create a keystore

   You can download one from https://www.dropbox.com/s/pcxxzcgfbr5ilko/KeyStore.jks?dl=0
   or make your own if you don't trust us.

4. Store the keystore password in $KEYSTORE_PASS (the password for the Dropbox
   keystore is "password")
5. Run

  $ bin/cs5431 webserver path/to/keystore <port-num> <public> <private> <privileged> <address list>

Arguments:
* port-num : port number on which webserver will run a cryptocurrency node
* public  : filepath to this node's public key (generated via a client, see below)
* private  : filepath to this node's private key (generated via a client, see below)
* privileged  : filepath to the "privileged" public key (generated via client)
                the "privileged" public key is a public key belonging to a
                particular node, which allows that node to mine the genesis block.
* address : filepath to list of addresses of other nodes to connect to; these are
            nodes that have already been started. This means that the first node to
            start up should not have any address arguments in the file, the second
            node should should the first node's address, etc. Each address should be
            on a separate line of the form "(ip address):(port no)"

## Testing and FindBugs

If you would like to run our unit tests and run a FindBugs analysis, run

$ ./gradlew check

## Example commands for making transactions and blocks

Run

$ bin/cs5431 client
  > generate key1.pub key1.priv
  > generate key2.pub key2.priv
  > generate key3.pub key3.priv
  > quit

$ # run the setup steps described in the "Running the Webserver" section above
$ bin/cs5431 webserver path/to/keystore.jks 4443 key1.pub key1.priv key1.pub /dev/null

(in another terminal)
$ echo "localhost:4443" > nodes4444.txt
$ bin/cs5431 miner 4444 key2.pub key2.priv key3.pub nodes4444.txt

(in yet another terminal)
$ echo -e "localhost:4443\nlocalhost:4444" > nodes4445.txt
$ bin/cs5341 miner 4445 key3.pub key3.priv key3.pub nodes4445.txt

You should see some output from each two nodes. In particular, you
should see a print hexidecimal string starting with (at least) four zeros.
This is the SHA-256 hash of the genesis block, which contains a reward
transaction for key2 (of value 50000).

Open the website in a browser (https://localhost:5000) and create an account
with username "username1" by clicking on the "Register" link.
Make sure your password

- is between 12 and 24 characters in length
- contains a lowercase letter, uppercase letter, and number

Go to your user page (/user/username1), and upload the public/private key
for key3 using the form on the left of the page. The keys should be entered as
hex-strings, which you can get by running

$ echo $(xxd -p key3.pub | tr -d "\n") # similarly for key3.priv

Then logout by clicking the "Logout" link, and create another user account
with username "username2". Upload the public/private key2 for username2. Then,
from the user page, click on the "username1" icon, which authorizes username1
to send you money.

Logout and log back in as username1. Click on the "Balance" link. You should
have a balance of 50000 (recall that key3 is the privileged key).

Click on the "Transact" link, and try sending money to username2. You will need
to enter the same password that you entered when you submitted key3.

After submitting the form, you should see that the transaction was accepted by
the cryptocurrency network (unless you tried to send more than 50000 coins!).
If you sent less than 50000 coins, the transaction should contain a second
output with your change.

Now try sending money to a user other than username1 or username2 (we will
prepopulate the remote database with some users, just pick any of them).
You can't, because they haven't authorized you! (Of course, we also check
on the server side, not just on the client).

Keep sending money to your heart's delight! As you continue, you should see
blocks being mined in the nodes' outputs.
