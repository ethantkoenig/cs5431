# CS 5431 - Milestone 2 README

James Cassell (jcc384)
Evan King (esk79)
Ethan Koenig (etk39)
Eric Perdew (ecp84)
Will Ronchetti (wrr33)

## Overview

Our project uses Java 8. We have most extensively tested on 1.8.0_121 and
1.8.0_31, but any version 1.8.0_xyz *should* be sufficient.

Our projects uses the Gradle build tool. We have included the Gradle wrapper, so
that you do not need to install Gradle manually. Note that the first command you
run using the Gradle the wrapper may take a few minutes.

## Compiling and Running

### Compiling and setup

To compile our source code, run

$ ./gradlew assemble

This command will create a compressed archive at build/distributions/cs5431.tar.
Copy this tar to a directory of your choosing, and extract it.

Inside the decompressed directory, there will be an executable at bin/cs5431.
This executable will run our project.

### Running a Node

To launch a node (i.e. a ledger-keeping, block-mining component of the
cryptocurrency network), run

$ bin/cs5431 node <port no> <public> <private> <privileged> <adress list>

Arguments:
* port_no : port number to bind to
* public  : filepath to this node's public key (generated via a client, see below)
* private  : filepath to this node's private key (generated via a client, see below)
* privileged  : filepath to the "privileged" public key (generated via client)
                the "privileged" public key is a public key belonging to a
                particular node, which allows that node to mine the genesis block.
* address : filepath to list of addresses of other nodes to connect to; these are 
            nodes that have already been started. This means that the first node to
            start up should not have any address arguments in the file, the second 
            node should should the first node's address, etc. Each address should be
            on a seperate line of the form "(ip address):(port no)"

Make sure that the "privileged node" (i.e. the node whose public key is the
privileged key) starts last.

For example, to launch three nodes locally, run

$ bin/cs5431 node 8000 public1 private1 public3

(then, in another terminal)
$ bin/cs5431 node 8001 public2 private2 public3 localhost:8000

(finally, in yet another terminal)
$ bin/cs5431 node 8002 public3 private3 public3 localhost:8000 localhost:8001

where publicX/privateX are filepaths to public/private keys.

### Running a Client

A client allows you to generate keys and perform transactions. To launch a
client, run

$ bin/cs5431 client

This will open an interactive shell, which supports the following commands:

* help - list all commands
* quit - quit the shell
* setNodeList <filepath> -
    Given a file with lines of the form "(ip address):(port number)", register
    the list of running nodes to connect to for transactions.
* generate <public filepath> <private filepath> -
    Generate a public/private key pair to the specified filepaths
* transact
    Perform a transaction. You will be prompted to enter the details of your
    transaction:
    - For each input, the transaction SHA-256 hash, index, and private key to sign with
    - For each output, the amount and recipient public key
    The keys should be given as filepaths to files generated by the "generate"
    command. Transaction hashes should be given as hex strings, which can be
    gleaned from the nodes' output.


## Testing and FindBugs

If you would like to run our unit tests and run a FindBugs analysis, run

$ ./gradlew check
