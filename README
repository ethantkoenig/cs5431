# CS 5431 - Milestone 5 README

James Cassell (jcc384)
Evan King (esk79)
Ethan Koenig (etk39)
Eric Perdew (ecp84)
Will Ronchetti (wrr33)

## Overview

Our project uses Java 8. We have most extensively tested on 1.8.0_121 and
1.8.0_31, but any version 1.8.0_xyz *should* be sufficient.

Our projects uses the Gradle build tool. We have included the Gradle wrapper, so
that you do not need to install Gradle manually. Note that the first command you
run using the Gradle the wrapper may take a few minutes.

## Compiling and Running

### Compiling and setup

To compile our source code, run

$ ./gradlew assemble

This command will create a compressed archive at build/distributions/cs5431.tar.
Copy this tar to a directory of your choosing, and extract it.

Inside the decompressed directory, there will be an executable at bin/cs5431.
This executable will run our project.

### Running a Miner

To launch a miner (i.e. a ledger-keeping, block-mining component of the
cryptocurrency network), run

$ bin/cs5431 miner -c path/to/node.properties

where config.properties is a .properties file with the configuration for the
miner. Check out example/miner1.properties or example/miner2.properties inside
the decompressed directory, and modify them as you need.

Description of fields:

nodePort: port on which miner will run4444
publicKey: filepath of miner's public key
privateKey: filepath of miner's private key
privilegedKey: filepath of privileged public key
logfilePath: filepath where log will be stored
blockChainPath: filepath where blockchain will be stored
nodeList: comma-separated list of <ip-addr>:<port-no> addresses to connect to

### Running a Node

To launch a node (i.e. a ledger-keeping, non-block-mining component of the
cryptocurrency network), run

$ bin/cs5431 node -c path/to/node.properties

where node.properties is a .properties file with the configuration for the node.
Check out example/node.properties, and modify it as you need.

Description of fields: (same as miner.properties)

### Running a Client

A client allows you to generate keys and perform transactions. To launch a
client, run

$ bin/cs5431 client

This will open an interactive shell, which supports the following commands:

* help - list all commands
* quit - quit the shell
* setNodeList <filepath> -
    Given a file with lines of the form "(ip address):(port number)", register
    the list of running nodes to connect to for transactions.
* generate <public filepath> <private filepath> -
    Generate a public/private key pair to the specified filepaths
* transact
    Perform a transaction. You will be prompted to enter the details of your
    transaction:
    - For each input, the transaction SHA-256 hash, index, and private key to sign with
    - For each output, the amount and recipient public key
    The keys should be given as filepaths to files generated by the "generate"
    command. Transaction hashes should be given as hex strings, which can be
    gleaned from the nodes' output.

### Running the Webserver

To run the webserver,

1. Create a keystore. We've provided you with one, example/KeyStore.jks inside
   the decompressed directory, whose password is "password".

2. Run

  $ bin/cs5431 webserver -sc path/to/webserver.properties

where webserver.properties is a .properties file with the configuration for the
webserver. Check out our example/webserver.properties, and modify it as you need.

Description of fields:

serverPort: port on which webserver will run
nodeAddress: address of cryptocurrency node/miner that webserver will contact
nodePort: port number of cryptocurrency node/miner that webserver will contact
keystore: filepath to keystore.
keystorePassword: password for keystore
logfilePath: filepath for webserver log
databasePassword: password for our database

## Testing and FindBugs

If you would like to run our unit tests and run a FindBugs analysis, run

$ ./gradlew check

## Example commands for making transactions and blocks

We've provided you with two private/public keypairs in the example/
directory, key1.priv/key1.pub and key2.priv/key.pub. You're free to
generate you own if you want; just make sure to update the
minerX.properties files accordingly.

Run

$ # run non-privileged miner
$ # yes, launch miner2 before miner1, this is not a mistake
$ bin/cs5431 miner -c miner2.properties

$ # (another terminal) run privileged miner
$ bin/cs5431 miner -c miner1.properties

$ # (another terminal) run webserver
$ bin/cs5431 webserver -sc webserver.properties

You should see some output from each miner. In particular, you
should see a printed hexadecimal string starting with (at least) four zeros.
This is the SHA-256 hash of the genesis block, which contains a reward
transaction for key2 (of value 50000).

Open the website in a browser (https://localhost:5000) and create an account
with username "username1" by clicking on the "Register" link. Make sure to
register with an email address you actually own. Your password must be at least
16 characters in length.

Go to your user page (/user), and upload the public/private key
for key1 using the form on the left of the page. The keys should be entered as
hex-strings, which you can get by running

$ echo $(xxd -p key1.pub | tr -d "\n") # similarly for key1.priv

You will have to follow a one-time link that is sent to your email to confirm
the key upload.

Then logout by clicking the "Logout" link, and create another user account
with username "username2" (with another email you own). Upload the public/private
key2 for username2. Then, from the user page, click on the "username1" icon, which
authorizes username1 to send username2 money.

Logout and log back in as username1. Click on the "Balance" link. You should
have a balance of 50000 (recall that key1 is the privileged key).

Click on the "Transact" link, and try sending money to username2. You will need
to enter the same password that you entered when you submitted key3.

After submitting the form, you should see that the transaction was accepted by
the cryptocurrency network (unless you tried to send more than 50000 coins!).
If you sent less than 50000 coins, the transaction should contain a second
output with your change.

Now try sending money to a user other than username1 or username2 (we will
prepopulate the remote database with some users, just pick any of them).
You can't, because they haven't authorized you! (Of course, we also check
on the server side, not just on the client).

Keep sending money to your heart's delight! As you continue, you should see
blocks being mined in the nodes' outputs.
